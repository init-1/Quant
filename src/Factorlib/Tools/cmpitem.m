classdef cmpitem < handle
    properties (Constant)
        map = initMap;
    end
    
    properties %(SetAccess = private)
        startDate
        endDate
        
        secids
        groups
    end

    properties (SetAccess = private)
        dates
    end
    
    methods
        function o = cmpitem(startDate, endDate)
            o.startDate = startDate;
            o.endDate   = endDate;
            
            o.dates = containers.Map('KeyType', 'double', 'ValueType', 'any');
            for freq = 1:6
                o.dates(freq) = genDateSeries(startDate, endDate, freq, 'BusDays', 0);
            end
            
%             ids = DB.runSql('select id, sectypeid, country from datainterfaceserver.dataqa.api.secmstr');
%             o.secids = cellfun(@(x){x(2:end)},ids.id);
            sids = load('secids.mat');
            o.secids = sids.secids;
            
            o.groups = containers.Map('keytype', 'char', 'valuetype', 'any');
%             ids.country(cellfun(@(x)any(isnan(x)),ids.country)) = {'NONE'};
%             segs = unique(ids.country);
%             for s = segs(:)'
%                 idx = strcmp(ids.country, s{:});
%                 o.groups(s{:}) = idx;
%             end
            
%             aggids = {'000524248' '00053' '000530824' '0064990100' '0064891800'};
%             univ = {'SP400' 'SP500' 'SP600' 'MSCI_World' 'MSCI_EM'};
            aggids = {'00053' '0064990100' '0064899903' '0064106233' '0064891800'};
            univ   = {'SP500' 'MSCI_World' 'MSCI_APxJ' 'MSCI_SCAP' 'MSCI_EM'};
            for i = 1:numel(aggids)
                [~, holdings] = LoadIndexHoldingTS(aggids{i}, startDate, endDate, false, 'M');
                idx = fts2mat(~isnan(holdings) & holdings > 0);
                sids = fieldnames(holdings, 1);
                T = size(idx,1);
                tidx = false(T, numel(o.secids));
                for t = 1:T
                   tidx(t,:) = ismember(o.secids, sids(idx(t,:)));
                end
                o.groups(univ{i}) = myfints(holdings.dates, tidx, o.secids);
            end
            
%             n = [500 1000 1500];
%             for i = 1:numel(n)
%                 idx = false(1, numel(o.secids));
%                 idx(unique(randi(numel(o.secids), n(i), 1))) = true;
%                 o.groups(['Random_' num2str(n(i))]) = idx;
%             end
        end
        
        function ret = run(o)
            ret = cell(size(o.map,1),1);
            for i = 1:size(o.map,1)
                freq = o.map{i,1};
                if freq == 'Y', freq = 'A'; end
                freq = freqnum(freq);
                old = o.loadOld(o.map{i,2}, freq);
                new = o.loadNew(o.map{i,3}, freq);
                if isempty(old) || isempty(new)
                    ret{i} = nan;
                else
                    [old, new] = aligndates(old, new, new.dates);
                    old_nan = isnan(old);
                    old_0 = old == 0;
                    new_nan = isnan(new);
                    new_0 = new == 0;
                    new(old_nan & new_0) = nan;
                    old(new_nan & old_0) = nan;
                    
                    ret{i}.all = compare(old, new);
                    ftsassert(isequal(o.secids, fieldnames(old,1)));
                    segs = keys(o.groups);
                    for s = segs
                        idx = o.groups(s{:});
                        from = old;
                        to   = new;
                        if isa(idx,'xts')
                            idx = fill(fill(alignto(from, idx), inf, 'row'), -inf, 'row');
                            from(~idx) = nan;
                            to(~idx) = nan;
                        else
                            from(:,~idx) = nan;
                            to(:,~idx) = nan;
                        end
                        ret{i}.(s{:}) = compare(from, to);
                    end
                end
            end
        end
        
        function report(o, ret, fname)
            set(0, 'DefaultFigureVisible', 'off');
            figfmt = 'height=0.5cm,width=1cm';
            color = ['cone'; 'ctwo'];
            
            flds = fieldnames(ret{1});
            idx = cellfun(@isempty, regexp(flds, 'Random'));
            flds = [flds(idx); flds(~idx)];
            nCol  = 12;
            nItem = size(o.map,1);
            nSubItem = numel(flds)+1;
            body = cell(nItem*nSubItem, nCol);
            body(:) = {''};
            desc = cell(nItem,1);
            for i = 1:nItem
                dsname = DB.runSql(['select dsname from datainterfaceserver.dataqa.api.itemmstr where id=''' o.map{i,2} '''']);
                desc{i} = [' (' dsname.dsname ')'];
            end
            body(1:nSubItem:end,1) = strcat(['\multicolumn{' num2str(nCol) '}{l}{\cellcolor{inglblue}\textbf{'], o.map(:,2),{' : '}, o.map(:,3), desc, '}}');
            body(1:nSubItem:end,2:end) = {{}};
            
            title = {'\multicolumn{1}{c|}{Item}' '\multicolumn{2}{c|}{Coverage}'...
                     '\multicolumn{1}{c}{\#Cmmn}' '\multicolumn{1}{c}{\#QAI}'...
                     '\multicolumn{1}{c|}{\#CIQ}' '\multicolumn{2}{c|}{Correlation}'...
                     '\multicolumn{2}{c|}{Eul Distance}' '\multicolumn{2}{c}{Cos Distance}'};
            
            for i = 1:nItem
                if ~isstruct(ret{i}) && isnan(ret{i})
                    continue;
                end
                    
                for j = 2:nSubItem
                    r = ret{i}.(flds{j-1});
                    cvg = bsxfun(@rdivide, r(:,'common'), r(:,'from'));
                    r = [fts2mat(cvg) fts2mat(r)];
                    r(:,6) = bsxfun(@rdivide, r(:,6), r(:,2));
                    fn = [o.map{i,2} '-' flds{j-1}];
                    
                    tabplot(r(:,1), ['CVG-' fn]);
                    tabplot(r(:,5), ['RHO-' fn]);
                    tabplot(r(:,6), ['EDT-' fn]);
                    tabplot(r(:,7), ['CDT-' fn]);
                    
                    v = nanmean(r, 1);
                    v = arrayfun(@(x){num2str(x,'%.2f')}, v);
                    
                    f = regexprep(flds{j-1}, '_', '\\$0');
                    body{(i-1)*nSubItem+j, 1} = ['\rowcolor{' color(mod(j,2)+1,:) '}\hspace*{0.5cm}' f];
                    body((i-1)*nSubItem+j, [2 4 5 6 7 9 11]) = v;
                    body{(i-1)*nSubItem+j, 3} = ['\includegraphics[' figfmt ']{CVG-' fn '}']; % figures here
                    body{(i-1)*nSubItem+j, 8} = ['\includegraphics[' figfmt ']{RHO-' fn '}']; % figures here
                    body{(i-1)*nSubItem+j, 10} = ['\includegraphics[' figfmt ']{EDT-' fn '}']; % figures here
                    body{(i-1)*nSubItem+j, 12} = ['\includegraphics[' figfmt ']{CDT-' fn '}']; % figures here
                end
            end
            
            p = PDFDoc(fname);
            p.writeln('\footnotesize');
            p.writeln('\setlength{\tabcolsep}{5pt}');
            p.table('Items Comparison b.t. QAI \& CIQ', title, body, 'l|p{0.8cm}c|rrr|p{0.8cm}c|p{0.8cm}c|p{0.8cm}c');
            p.writeln('Notes:');
            p.writeln('\begin{enumerate}');
            p.writeln(['\item Euclidean Distance defined as normalized $\sqrt{\sum_{k}\left(x_{1,k}-x_{2,k}\right)^2}$ '...
                       'divided by number of common securities. \emph{The lower the better}.']);
            p.writeln(['\item Cosine Distance defined as $\frac{\sum_k(x_{1,k}x_{2,k})}{\sqrt{\sum_k x_{1,k}^2}\sqrt{\sum_k x_{2,k}^2}}$.'...
                       ' \emph{The closer to 1 (meaning the angle they formed close to 0) the better}.']);
            p.writeln('\end{enumerate}');
            p.run(4);
            %system('del RHO-*.pdf CVG-*.pdf');
        end
        
        function old = loadOld(o, id, freq)
            old = loadItem(o, id);
            if ~isempty(old)
                old = padfield(old, o.secids);
                if freqnum(freq) ~= 0
                    old = aligndates(old, o.dates(freq));
                end
            end
        end
        
        function new = loadNew(o, id, freq)
            if isempty(id)
                new = [];
                return;
            end
            
            if freq == freqnum('M')
                nfill = 18;
            elseif freq == freqnum('A')
                nfill = 2;
            else
                nfill = 6;
            end
                
            pattern = '\<D00.......\>';
            [~,~,~,ids] = regexp(id, pattern);
            fts = cell(numel(ids),1);
            for i = 1:numel(ids)
                fts{i} = loadItem(o, ids{i});
                if isempty(fts{i})
                    new = [];
                    return;
                end
                fts{i} = padfield(fts{i}, o.secids);
                %fts{i} = backfill(fts{i}, nfill, 'entry');
            end

            if freqnum(freq) ~= 0
                [fts{:}] = aligndates(fts{:}, o.dates(freq));
                idx = true(size(fts{1}));
                for i = 1:numel(fts)
                    idx_ = isnan(fts2mat(fts{i}));
                    fts{i}(idx_) = 0;
                    idx = idx & idx_;
                end
                for i = 1:numel(fts)
                    fts{i}(idx) = NaN;
                end
            end
            
            arglist = sprintf(',%s', ids{:});
            fun = str2func(['@(' arglist(2:end) ')' id]);
            new = fun(fts{:});
            new(isinf(new)) = NaN;
        end
        
        function item = loadItem(o, id)
            TRACE('Loading %s\n', id);
            try
                item = LoadRawItemTS(o.secids, id, o.startDate, o.endDate);
            catch e
                TRACE.Warn('%s\n', repException(e));
                item = [];
            end
        end
    end
end

function v = compare(from, to)
%     qt =quantile(fts2mat(from), [0.01 0.99], 2); 
%     from(bsxfun(@lt, from, qt(:,1)) | bsxfun(@gt, from, qt(:,2))) = NaN;
%     qt =quantile(fts2mat(to), [0.01 0.99], 2); 
%     to(bsxfun(@lt, to, qt(:,1)) | bsxfun(@gt, to, qt(:,2))) = NaN;
    rho = csrankcorr(from, to);  %cscorr(from, to, 'rows', 'pairwise');
    from = ~isnan(from);
    to   = ~isnan(to);
    common = from & to;
    v = [cssum(common) cssum(from) cssum(to) rho euclidanDist(from, to) cosineDist(from, to)];
    v = chfield(v, fieldnames(v,1), {'common' 'from' 'to' 'rho' 'edist' 'cdist'});
end

function v = euclidanDist(from, to)
    min_k = nanmin(nanmin(from,[],2), nanmin(to,[],2));
    from = bsxfun(@minus, from, min_k);
    to   = bsxfun(@minus, to,   min_k);
    max_k = nanmax(nanmax(from,[],2), nanmax(to,[],2));
    from = bsxfun(@rdivide, from, max_k);
    to   = bsxfun(@rdivide, to,   max_k);
    v = uniftsfun(cssum((from-to) .^ 2), @sqrt);
end

function v = cosineDist(from, to)
    v = bsxfun(@times, uniftsfun(cssum(from.^2), @sqrt), uniftsfun(cssum(to.^2), @sqrt));
    v = bsxfun(@rdivide, cssum(from .* to), v);
%    v = uniftsfun(v, @acos);
end

function tabplot(r, fname)
    figure
    set(gcf, 'PaperUnits', 'centimeters', ...
        'PaperSize', [2 1], ...
        'PaperPosition', [-0.58 -0.38 2.8 1.48]);
    if numel(r) > 1
        plot(r, 'linewidth', 1);
        set(gca, 'XLim', [1 numel(r)], 'YLim', [0 1]);
    end
    set(gca, 'box', 'off', 'visible', 'off', 'color', 'none');
    saveas(gcf, [fname '.pdf']);
    close
end

%         itemswith0asnan = {...
%             'D000110146' 'D000110162' 'D000110343' 'D000110466' 'D000110467' 'D000110479' ...
%             'D000110514' 'D000110538' 'D000110891' 'D000111132' 'D000111158' 'D000111739' ...
%         };


function m = initMap
    worldScope2CIQ = {...
    %%% World Scope to CIQ
    'D', 'D000110013', 'D001200009' ...
    'D', 'D000110018', 'D000550104' ...
    'D', 'D000110087', 'D000551600' ...
    'D', 'D000110101', 'D000551601 / D001200009' ...
    'Y', 'D000110113', 'D000550104' ...
    'Y', 'D000110115', 'D000563219 * 1e6' ...
    'Y', 'D000110142', 'D000550551 / D000563214' ...
    'Y', 'D000110146', 'D000550068' ...
    'Y', 'D000110162', 'D000550068' ...
    'Y', 'D000110193', 'D000550067' ...
    'Y', 'D000110211', 'D000550067' ...
    'Y', 'D000110237', 'D000550029 / D000563214' ...
    'Y', 'D000110329', 'D000550541 * (-1e6)' ...
    'Y', 'D000110343', 'D000550855 * (-1e6)' ...
    'Y', 'D000110365', 'D000550430 * 1e6' ...
    'Y', 'D000110440', 'D000550068 / D000550067' ...
    'Y', 'D000110442', 'D000550068 / D000550067' ... 
    'Y', 'D000110466', 'growth(D000550068,3)' ...
    'Y', 'D000110467', 'growth(D000550068,5)' ...
    'Y', 'D000110473', 'D000550071 * 1e6' ...
    'Y', 'D000110479', 'growth(D000550067,5)' ...
    'Y', 'D000110514', 'D001200009 * D001200018 + D000548156 + D000554515 + D000555129 - D000554391' ...
    'Y', 'D000110538', '(D000549964 + D000550021 + D000549971 + D000550750 + D000550628 + D000550634 + D000550829 + D000550835 + D000550855) * 1e6' ...
    'Y', 'D000110578', '' ...
    'Y', 'D000110585', 'D000550551 * 1e6' ...
    'Y', 'D000110729', 'D000551308 / avg(D000550326,2)' ...
    'Y', 'D000110842', 'D000549800 / D000551360 * 100' ...
    'Y', 'D000110852', 'growth(D000551360,5)' ...
    'Y', 'D000110891', 'growth(D000549811,5)' ...
    'Y', 'D000111021', 'D001200056 / D000581754' ...
    'Y', 'D000111048', '(D001200056 * D001200018) / D000581044' ...
    'Y', 'D000111132', 'D000550893 * 1e6' ...
    'Y', 'D000111154', 'D000550067 / avg(D000550104,2) * 100' ...
    'Y', 'D000111158', '(D000549800 + ((-D000550295 - D000549899) * (1 - D000562779))) / avg(D000550195 + D000550264,2) * 100' ...
    'Y', 'D000111193', 'D000550427 * 1e6' ...
    'Y', 'D000111205', 'D000550166 / D000550430 *100' ...
    'Q', 'D000111339', 'D000554938 / D000555605 * 100' ...
    'Q', 'D000111345', 'D001200009 / D000554389' ...
    'Q', 'D000111346', 'D000551601 / D001200009' ...
    'Q', 'D000111361', 'D000549410 / D000548869 * 100' ...
    'Q', 'D000111412', 'D000554816 * 1e6' ...
    'Q', 'D000111453', 'D000554324' ...
    'Q', 'D000111513', 'D000555605 * 1e6' ...
    'Q', 'D000111622', 'D000551600' ...
    'Q', 'D000111623', 'D000549289 / D000561271' ...
    'Q', 'D000111726', 'D000555129 / D000554819 * 100' ...
    'Q', 'D000111739', 'D001200009 * D001200018 + D000548156 + D000554515 + D000555129 - D000554391' ...
    'Q', 'D000112407', 'D000551604 * 1e6' ...
    'Q', 'D000112408', 'D000551605 * 1e6' ...
    'W', 'D000112587', 'D001200009' ...
    'M', 'D000112644', 'D000561276 * 1e6' ...
    ... % pricing items
    'D', 'D001410415', 'D001200056' ...
    'D', 'D001410419', 'D001200058' ...
    'D', 'D001410423', 'D001200059' ...
    'D', 'D001410472', 'D001200018' ...
    'D', 'D001410451', 'D001200018 * D001200056' ...
    ... % 'D', 'D001410446', 'D001200065' ...
    'D', 'D001410430', 'D001200019' ...
    ... % 'D', 'D001400028', 'D001200033' ...
    };   

    ibes2CIQ = {...
    'M' 'D000410126' 'aligndates(D001200009,D003512023-1)' ... % CIQ is daily, exactly matched to IBES one day before IBES dates
    'M' 'D000410138' 'D003500008' ... % CPS
    'M' 'D000410146' 'D003500013' ... % DPS
    'M' 'D000410178' 'D003500022' ... % EPS, normalized
    'M' 'D000410404' 'D003500541' ... % BPS, minor difference
    'M' 'D000410405' 'D003500542' ... % ditto
    'M' 'D000410406' 'D003500543' ... % ditto
    'M' 'D000410564' 'D003500631' ... % CPS, minor difference
    'M' 'D000410565' 'D003500632' ... % ditto
    'M' 'D000410566' 'D003500633' ... % ditto
    'M' 'D000410724' 'D003500781' ... % DPS, minor difference
    'M' 'D000410725' 'D003500782' ... % ditto
    'M' 'D000410726' 'D003500783' ... % ditto
    'M' 'D000411364' 'D003501051' ... % 'D003500991' ... % ditto
    'M' 'D000411365' 'D003501052' ... % 'D003500992' ... % ditto
    'M' 'D000411366' 'D003501053' ... % 'D003500993' ... % ditto
    'M' 'D000411369' 'D003509419' ... % most matched in value
    ''  'D000411374' 'aligndates(D003509884, D000411374.dates)' ... % EPS FY1 num down
    'M' 'D000411384' 'D003515993' ... % ? EPS FY1 num, CUSTOMIZED
    'M' 'D000411394' 'D003516028' ... % ? EPS FY1 num up, CUSTOMIZED
    'M' 'D000412644' 'D003501531' ... % FY1 sales median...
    'M' 'D000412645' 'D003501532' ... % FY2 sales median
    'M' 'D000412646' 'D003501533' ... % FY3 sales median
    'M' 'D000415172' 'D003509438' ... % mean of recommendation level
    'M' 'D000415179' 'D003512028' ... % FQ1 dates
    'M' 'D000415183' 'D003512026' ... % FY1 dates
    'M' 'D000415184' 'D003512027' ... % FY2 dates
    'M' 'D000415185' 'D003512027' ... % ? FY3 dates
    'M' 'D000431932' 'D003512024' ... % FQ0 dates
    'M' 'D000431933' 'D003512023' ... % FY0 dates, close
    'M' 'D000432078' 'aligndates(D001200056, D003512023-1)' ... % price. CIQ is daily
    'M' 'D000432082' 'D003500113' ... % BPS, value close
    'M' 'D000432098' 'D003500121' ... % DPS, perfect match
    'M' 'D000432130' 'D003500129' ... % EPS, perfect match, NORMALIZED
    'M' 'D000432131' 'D003500160' ... % EPS, perfect match, NORMALIZED
    'M' 'D000432194' 'D003500141' ... % SAL, perfect match
    'M' 'D000434624' 'D003505750' ... % FY1 BPS mean
    'M' 'D000434625' 'D003505751' ... % FY2 BPS mean
    'M' 'D000434644' 'D003509444' ... % ? FY1 BPS num down
    'M' 'D000434645' 'D003515229' ... % ? nothing found, FY2 BPS num down
    'M' 'D000434654' 'D003509439' ... % ? FY1 BPS num
    'M' 'D000434655' 'D003515224' ... % ? nothing found, FY2 BPS num
    'M' 'D000434664' 'D003509474' ... % ? FY1 BPS num up
    'M' 'D000434665' 'D003515259' ... % ? nothing found FY2 BPS num up
    'M' 'D000434784' 'D003505825' ... % FY1 CPS mean
    'M' 'D000434785' 'D003505826' ... % FY2 CPS mean
    'M' 'D000434804' 'D003509524' ... % ? FY1 CPS num down, short history
    'M' 'D000434805' 'D003515269' ... % ? nothing found FY2 CPS num down
    'M' 'D000434814' 'D003509519' ... % ? FY1 CPS num, short history from May 2008
    'M' 'D000434815' 'D003515264' ... % ? nothing found FY2 CPS num
    'M' 'D000434824' 'D003509554'...  % ? FY1 CPS num up, short history started from May 2008
    'M' 'D000434825' 'D003515299' ... % ? nothing found FY2 CPS num up
    'M' 'D000434944' 'D003505950' ... % FY1 DPS USD
    'M' 'D000434945' 'D003505951' ... % FY2 DPS USD
    'M' 'D000434964' 'D003509564' ... % ? 1Y DPS num down
    'M' 'D000434965' 'D003515309' ... % ? nothing found 2Y DPS num down
    'M' 'D000434974' 'D003509559' ... % ? 1Y DPS num
    'M' 'D000434975' 'D003515304' ... % ? nothing found, 2Y DPS num
    'M' 'D000434984' 'D003509594' ... % ? 1Y DPS up
    'M' 'D000434985' 'D003515339' ... % ? nothing found 2Y DPS up
    'M' 'D000435580' 'D003515975' ... % EPS, CUSTOMIZED
    'M' 'D000435584' 'D003515970' ... % EPS, CUSTOMIZED
    'M' 'D000435585' 'D003515971' ... % EPS, CUSTOMIZED
    'M' 'D000435586' 'D003515972' ... % EPS, CUSTOMIZED
    'M' 'D000435589' 'D003509418' ... % LT, IBES usd, CIQ reported
    'M' 'D000435594' 'D003506155' ... % EPS, NORMIZED, very close 
    'M' 'D000435595' 'D003506156' ... % EPS, very close 
    'M' 'D000435596' 'D003506157' ... % EPS, very close
    'M' 'D000435604' 'D003515998' ... % ? FY1 EPS DOWN, CUSTOMIZED
    'M' 'D000435605' 'D003516118' ... % ? FY2 EPS DOWN, CUSTOMIZED
    'M' 'D000435614' 'D003515993' ... % ? FY1 EPS num, CUSTOMIZED
    'M' 'D000435615' 'D003516113' ... % ? FY2 EPS num, CUSTOMIZED
    'M' 'D000435624' 'D003516023' ... % ? FY1 EPS UP, CUSTOMIZED
    'M' 'D000435625' 'D003516143' ... % ? FY2 EPS UP, CUSTOMIZED
    'M' 'D000435634' 'D003506135' ... % EPS, std, NORMALIZED
    'Y' 'D000436864' 'D003506475' ... % SAL
    'Y' 'D000437319' 'aligndates(leadts(D003500113,2),''A'')' ...  % BPS
    'Y' 'D000437351' 'aligndates(leadts(D003500121,2),''A'')' ...  % DPS
    'Y' 'D000437417' 'aligndates(leadts(D003500129,2),''A'')' ...  % EPS, NORMALIZED
    'Y' 'D000437545' 'aligndates(leadts(D003500141,2),''A'')' ...  % SAL, USD; Reported: D003500037
    'D' 'D000446805' 'current(D003505950)' ...   % USD; Reported: D003500776
    'D' 'D000448965' 'current(D003515970)' ...   % CUSTOMIZED, (D003506150 normalized), USD; Reported: D003500986
    'D' 'D000448966' 'current(D003515971)' ...   % CUSTOMIZED, (D003506151 normalized), USD; Reported: D003500987
    'D' 'D000448967' 'current(D003515972)' ...   % CUSTOMIZED, (D003506152 normalized), USD; Reported: D003501048
    'D' 'D000448970' 'current(D003509418)' ...   % value matched
    'D' 'D000449005' 'current(D003506155)' ...   % EPS, normalized, USD; Reported: D003501051
    'M' 'D000449135' 'current(D003506135)' ...   % EPS, normalized, standard deviation
    'D' 'D000453285' 'current(D003506475)' ...   % SAL, USD; Reported: D003501526
    'M' 'D000453774' 'D001200018 ./ 1e6'   ...   % aligned to monthly financial dates
    'D' 'D000453775' 'current(D001200009)' ...
    };

%     m = {...
%     'D', 'D000110013', 'D001200056' ...
%     'D', 'D000110018', 'D000581754' ...
%     'D', 'D000110087', 'D000582911' ...
%     'D', 'D000110101', 'D000583093 / D001200056' ...
%     'Y', 'D000110113', 'D000581754' ...
%     'Y', 'D000110115', 'D000594827 * 1e6' ...
%     'Y', 'D000110142', 'D000582109 / D000594822' ...
%     'Y', 'D000110146', 'D000582912' ...
%     'Y', 'D000110162', 'D000582912' ...
%     'Y', 'D000110193', 'D000582911' ...
%     'Y', 'D000110211', 'D000582911' ...
%     'Y', 'D000110237', 'D000582375 / D000594822' ...
%     'Y', 'D000110329', 'D000581482 * (-1e6)' ...
%     'Y', 'D000110343', 'D000582365 * (-1e6)' ...
%     'Y', 'D000110365', 'D000581924 * 1e6' ...
%     'Y', 'D000110440', 'D000582912 / D000581574' ...
%     'Y', 'D000110442', 'D000582912 / D000581574' ...
%     'Y', 'D000110466', 'growth(D000582912,3)' ...
%     'Y', 'D000110467', 'growth(D000582912,5)' ...
%     'Y', 'D000110473', 'D000582915 * 1e6' ...
%     'Y', 'D000110479', 'growth(D000582911,5)' ...
%     'Y', 'D000110514', 'D001200056*D001200018 + D000581888 + D000581848 + D000581925 - D000581756' ...
%     'Y', 'D000110538', 'D000582131 + D000582214 + D000582138 + D000582220 + D000581503 + D000581509' ...
%     'Y', 'D000110578', '' ...
%     'Y', 'D000110585', 'D000582109 * 1e6' ...
%     'Y', 'D000110729', 'D000581575 / avg(D000581824,2)' ...
%     'Y', 'D000110842', 'D000581323 / D000581044 * 100' ...
%     'Y', 'D000110852', 'growth(D000581044,5)' ...
%     'Y', 'D000110891', 'growth(D000582405,5)' ...
%     'Y', 'D000111021', 'D001200056 / D000581754' ...
%     'Y', 'D000111048', '(D001200056 * D001200018) / D000581044' ...
%     'Y', 'D000111132', 'D000582451 * 1e6' ...
%     'Y', 'D000111154', 'D000582911 / avg(D000581754,2) * 100' ...
%     'Y', 'D000111158', '(D000581323 + ((-D000581797 - D000581400) * (1 - D000594387))) / avg(D000581690 + D000581768,2) * 100' ...
%     'Y', 'D000111193', 'D000581921 * 1e6' ...
%     'Y', 'D000111205', 'D000581925 / D000581924 *100' ...
%     'Q', 'D000111339', 'D000586574 / D000586629 * 100' ...
%     'Q', 'D000111345', 'D001200056 / D000579582' ...
%     'Q', 'D000111346', 'D000583093 / D001200056' ...
%     'Q', 'D000111361', 'D000580935 / D000580547 * 100' ...
%     'Q', 'D000111412', 'D000586130 * 1e6' ...
%     'Q', 'D000111453', 'D000579554' ...
%     'Q', 'D000111513', 'D000583931 * 1e6' ...
%     'Q', 'D000111622', 'D000583092' ...
%     'Q', 'D000111623', 'D000583512 / D000592879' ...
%     'Q', 'D000111726', 'D000586134 / D000586133 * 100' ...
%     'Q', 'D000111739', 'D001200056 * D001200018 + D000579651 + D000579644 + D000586134 - D000579584' ...
%     'Q', 'D000112407', 'D000583096 * 1e6' ...
%     'Q', 'D000112408', 'D000583097 * 1e6' ...
%     'W', 'D000112587', 'D001200056' ...
%     'M', 'D000112644', 'D000594827 * 1e6' ...
%     ... % pricing items
%     'D', 'D001410415', 'D001200056' ...
%     'D', 'D001410419', 'D001200058' ...
%     'D', 'D001410423', 'D001200059' ...
%     'D', 'D001410472', 'D001200018' ...
%     'D', 'D001410451', 'D001200018 * D001200056' ...
%     ... % 'D', 'D001410446', 'D001200065' ...
%     'D', 'D001410430', 'D001200019' ...
%     ... % 'D', 'D001400028', 'D001200033' ...
%   };

  diagIbes2CIQ = {...
    'M'	'D000411359'	'D003509418' ...
    'M'	'D000411369'	'D003509419' ...
    'M'	'D000411354'	'D003501046' ...
    'M'	'D000411364'	'D003501051' ...
    'M'	'D000411404'	'D003501031' ...
    'M'	'D000411355'	'D003501047' ...
    'M'	'D000411350'	'D003502540' ...
    'M'	'D000410178'	'D003500022' ...
    'M'	'D000453800'	'D003500160' ...
    'M'	'D000412479'	'' ...
    'M'	'D000412489'	'' ...
    'M'	'D000410559'	'' ...
    'M'	'D000410554'	'D003500626' ...
    'M'	'D000410555'	'D003500627' ...
    'M'	'D000410550'	'D003506694' ...
    'M'	'D000453791'	'D003500008' ...
    'M'	'D000453790'	'D003500008' ...
    'M'	'D000410719'	'' ...
    'M'	'D000410714'	'D003500776' ...
    'M'	'D000410724'	'D003500781' ...
    'M'	'D000410715'	'D003500777' ...
    'M'	'D000410710'	'D003500776' ...
    'M'	'D000453791'	'D003500073' ...
    'M'	'D000453792'	'D003500049' ...
    'M'	'D000412639'	'' ...
    'M'	'D000412634'	'D003501526' ...
    'M'	'D000412635'	'D003501527' ...
    'M'	'D000412630'	'D003501526' ...
    'M'	'D000453815'	'D003500037' ...
    'M'	'D000453816'	'D003500073' ...
    'M'	'D000410117'	'D003500249' ...
    'M'	'D000410125'	'D003500332' ...
    'M'	'D000410176'	'' ...
    'M'	'D000410178'	'D003500022' ...
    'M'	'D000415172'	'D003509438' ...
    'M'	'D000410234'	'D003500332' ...
    'M'	'D000453817'	'D003512023' ...
    'M'	'D000410146'	'D003500013' ...
    'M'	'D000453819'	'D003515944' ...
    'M'	'D000453776'	'D003512028' ...
    'M'	'D000453777'	'D003512029' ...
    'M'	'D000453778'	'D003512030' ...
    'M'	'D000453779'	'D003512031' ...
    'M'	'D000453780'	'D003512026' ...
    'M'	'D000453781'	'D003512027' ...
    'M'	'D000453782'	'' ...
    'M'	'D000453783'	'' ...
    'M'	'D000453784'	'' ...
    'M'	'D000453785'	'' ...
    'M'	'D000453817'	'D003512023' ...
    'M'	'D000453818'	'D003512023' ...
  };
      
  m = ibes2CIQ; % diagIbes2CIQ];
  m = reshape(m, 3, numel(m)/3)';
end
